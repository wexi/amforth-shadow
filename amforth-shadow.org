#+TITLE: The Shadow Knows
#+AUTHOR: Enoch
#+EMAIL: ixew@hotmail.com
#+OPTIONS: email:t
#+STARTUP: indent

* Objective

This is a sandbox for AmForth development that is maintained by an experienced embedded programmer, yet a novice in Forth. It is hoped that the new ideas that are presented here would soon be adopted
by [[http://amforth.sourceforge.net/][AmForth HQ]].

* Soft Interrupt Service

One of AmForth features is the ability to write Interrupt Service Routines (ISR), aka Interrupt Handlers, in Forth. However, in the current implementation (SVN r1430) those ISRs should run with the
hardware interrupt system disabled. This means that one has to keep ISRs short and defer long processing to the "main". The following changes to the kernel introduce an eight level soft interrupts
queue, allowing the Forth code Second Level Interrupt Handlers (SLIH) to be interruptible and thus be as slow to execute as necessary. The new first level interrupt handling (FLIH) is suitable for
type I interrupt sources, those acknowledged by execution of their interrupt vectors.

** New words

The following ("soft rear-end") words were added to the existing +int and -int ("hard front-end") which control SREG I-bit

+ int+ ( -- ) "soft interrupts on" :: Enables soft interrupts. If ~int+~ is the ISR last instruction the ISR routine would return before the next queued interrupt is served.

+ int- ( -- ) "soft interrupts off" :: Disables soft interrupts. If this instruction is the ISR first the ISR will not be interrupted.

+ int' ( -- addr ) "soft interrupts apostrophe" :: Returns the address of a system variable where the lower byte, if non zero, indicates occurance of a hard interrupt overflow. The overflow mark is
     the interrupting-device program address. Clear this mark by: ~0 int' c!~. The higher byte, if non-zero, indicates having the soft interrupts inhibited.

** Compatibility

As by default soft interrupts are enabled, existing code should not be impacted. ISRs should be regular Forth colon definitions!

** Limitation

It is recommended to turn interrupts off (~int-~) when compiling new code.

** Implementation

1. core/drivers/generic-isr.asm: FLIH with 8 level queue.
2. core/amforth-interpreter.asm: SLIH launcher.
3. core/words/swi??.asm: Soft interrupts control words.

* USART ISR receiver with CTS handshake

Define the following macros in your application main file ("template.asm"). For example:
#+BEGIN_EXAMPLE
#define CTS_ENABLE
.macro	CTS_OUT
	sbi	DDRD, 7
.endm
.macro	CTS_ON                  # invite
	cbi	PORTD, 7
.endmacro
.macro	CTS_OFF                 # dis-invite 
	sbi	PORTD, 7
.endmacro
#+END_EXAMPLE
 
* WLSCOPE

The Word List Scope mechanism was already accepted by HQ. What remains is to explain it better and promote its use. 

* Useful new words

+ @C :: [ASM] Like C@ but reads the byte as a signed 8 bit integer (i.e., extends sign).

+ CINVERT :: [ASM] Complements a single byte.

+ U2/ :: [ASM] Unsigned divide by two.

+ CELL- :: [ASM] Cell size address subtraction.

+ RDROP ( R: x -- ) :: [ASM] Drop top of run-time stack.

+ REVERSE ( X1 .. Xn n -- Xn .. X1 n ) :: [FORTH] LIFO made FIFO.

* Utilities

+ A distiller function :: --log option was added to amforth-shell.py to collect the actual code that it sends to the AmForth system.

+ Emacs amforth mode :: amoforth.el is a fork of gforth.el. It enforces OpenFirmware indentation rules. It would need much attention to reach full usefulness.
